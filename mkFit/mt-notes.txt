Better sensitive region checks, layer skipping, HoT in tree storage
-------------------------------------------------------------------

./mkFit --cmssw-seeds --clean-seeds --read --file-name /bar/mic/ttbar_pu.bin --build-ce --geom CMS-2017 --num-events 100 --best-out-of 3

Before: ???

After adding checks in SelectHitIndices and storage of WSR_Result
13.97138

After removing (now duplicate) checks in FindCandidatesCloneEngine()
13.81581


Stash of HoTNode/Tree for commit of HitStructures.h. Goes after
EventOfHits << FNORD

struct HoTNode
{
  HitOnTrack m_hot;
  int        m_prev;
  // could have short m_prev, m_ref_count ... if ref-count is needed.

  HoTNode() {}

  HoTNode(HitOnTrack hot, int prev) : m_hot(hot), m_prev(prev) {}
};

struct HoTTree
{
  std::vector<HoTNode> m_nodes;

  HoTTree(int max_size)
  {
    m_nodes.reserve(max_size);
    // For CE it's something like:
    //   n_seed + max_cand * (max_layers - n_seed)
    //   4 + 8 * (32 - 3) = 236
    // Not sure for std. Not relevant for BestHit as it is now.
  }

  // Probably will be around for a long while ... growing as needed.

  // API for adding hits.
};

// Could have common base with Track.
// Track could subclass TrackState.

class Candidate
{
  TrackState m_state;
  int        m_last_hit_node;
  float      m_chi2;
  // int n_hits, n_holes, n_good_hits
};

class Seedling
{
  // vector or array of Candidates. hmmh, probably different size for CE vs. Std.
  // Not if we do selective output from std, not final sorting.
  HoTTree m_hot_tree;
  int     m_label;
  // is_complete
  // arrays for chi2 so we can do selection? then not needed in Canditate?
};


//==============================================================================
//==============================================================================

FNORD

--------------------------------------------------------------------------------


#########
Open issues with endcap
#########

* BestHit for cmssw

Truth seeds: Some events in endcap (more in ec- than ec+) have few mc matching
found tracks (even only 2). The tracks are found but mc matching fails.

Similar for cmssw seeds with reco seed only -- maybe even less tracks are found.

Some of this effect is seen in barrel, too.


* Basic quality

In the following functions (search for XXXXMT4K):
  TrackExtra::setMCTrackIDInfo, MkBuilder::quality_process
we assume there is a single hit per layer in MC track.
In cmssw case, there can be several ... and our algorithms find only one hit
per layer. So some tracks get rejected as not having enough matching hits.

----------------

Test samples on desire:

./mkFit --read --file-name /bar/mic/mu_brl-1000-10.bin-4 --build-ce --geom CMS-2017 --cmssw-seeds
./mkFit --read --file-name /bar/mic/mu_ecp-1000-10.bin-4 --build-ce --geom CMS-2017 --cmssw-seeds --num-events 995
./mkFit --read --file-name /bar/mic/mu_ecn-1000-10.bin-4 --build-ce --geom CMS-2017 --cmssw-seeds --num-events 995


#########
Notes for Kevin
#########

// Dump sim tracks + hits
  for (auto & t : m_event->simTracks_)
  {
    printf("%2d (%2d): ", t.label(), t.nFoundHits());

    for (int i = 0; i < t.nFoundHits(); ++i)
    {
      int idx = t.getHitIdx(i);
      int lyr = t.getHitLyr(i);

      printf("%4d", idx >= 0 ? m_event->layerHits_[lyr][idx].mcHitID() : -1);
    }
    printf("\n");
  }

// Dump cands + hits (would need to build map label to index to
// get it properly sorted)
  for (auto & t : m_event->candidateTracks_)
  {
    printf("%2d (%2d): ", t.label(), t.nFoundHits());

    for (int i = 0; i < t.nFoundHits(); ++i)
    {
      int idx = t.getHitIdx(i);
      int lyr = t.getHitLyr(i);

      printf("%4d", idx >= 0 ? m_event->layerHits_[lyr][idx].mcHitID() : -1);
    }
    printf("\n");
  }

In general, search for XXMT4K.

Thing that is probably most urgent is Validation + some issues with Simulation
and Seeding.

Remapping funcs after finding commented out in:
  MkBuilder::quality_output_BH()
  MkBuilder::quality_output_COMB()

What is needed for validation?


#########
Full detector tracking
#########

0. Open issues:
  a. Storing of hit indices into Track
     Also -- MkFitter and arrays of full hits.
     There is this mkfp->SetNhits() in every building layer loop.
  b. Last seed layer should somhow be known to building functions.

1. Best-hit on x-1-10000-brl.raw

BEFORE:
Building tracks with 'runBuildingTestPlexBestHit', total simtracks=10000
found tracks=9215  in pT 10%=9163  in pT 20%=9195     no_mc_assoc=785
  nH >= 80% =9111  in pT 10%=9106  in pT 20%=9111

AFTER:
Building tracks with 'runBuildingTestPlexBestHit', total simtracks=10000
found tracks=9215  in pT 10%=9165  in pT 20%=9194     no_mc_assoc=785
  nH >= 80% =9115  in pT 10%=9110  in pT 20%=9115

2. Std

BEFORE:
Building tracks with 'runBuildingTestPlexStandard', total simtracks=10000
found tracks=9977  in pT 10%=9969  in pT 20%=9974     no_mc_assoc=23
  nH >= 80% =9972  in pT 10%=9968  in pT 20%=9971

AFTER:
Building tracks with 'runBuildingTestPlexStandard', total simtracks=10000
found tracks=9977  in pT 10%=9969  in pT 20%=9974     no_mc_assoc=23
  nH >= 80% =9972  in pT 10%=9968  in pT 20%=9971

3. Clone engine:

BEFORE:
Building tracks with 'runBuildingTestPlexCloneEngine', total simtracks=10000
found tracks=9977  in pT 10%=9969  in pT 20%=9974     no_mc_assoc=23
  nH >= 80% =9972  in pT 10%=9968  in pT 20%=9971

AFTER:
Building tracks with 'runBuildingTestPlexCloneEngine', total simtracks=10000
found tracks=9977  in pT 10%=9969  in pT 20%=9974     no_mc_assoc=23
  nH >= 80% =9972  in pT 10%=9968  in pT 20%=9971


#########
Valgrind running notes
#########

# Valgrind memcheck on OSX, no leak checking
valgrind --log-file=vg.5 --error-limit=no --dsymutil=yes --leak-check=no --time-stamp=yes ./mkFit > o.5 2> e.5

# Valgrind with remote gdb
valgrind --vgdb=yes --vgdb-error=0 --error-limit=no --leak-check=no --track-origins=yes --time-stamp=yes ./mkFit
gdb ./mkFit
  target remote | vgdb


########
Thread pinning notes
########

Thread pinning on host

  7.07s -- CandCloner cloner(8, 20); // Same core
  6.13s -- CandCloner cloner(1, 2);  // Same socket, another core
  7.90s -- CandCloner cloner(1, 7);  // Another socket

Thread pinning on MIC (no real difference)

 38.00s -- CandCloner cloner(1,  2);  // Same core (any pair of 1,2,3,4)
 37.95s -- CandCloner cloner(1,  5);  // Another cpu
 36.75s -- CandCloner cloner(1, 25);  // Another cpu
 37.75s -- CandCloner cloner(1, 233); // Another cpu
